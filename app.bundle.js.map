{"version":3,"file":"app.bundle.js","mappings":"mBAMA,SAASA,EAAoBC,GAC3B,MAAOC,EAAKC,GAAUF,EAChBG,EAAmB,GAyBzB,OAxBIF,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEvCD,GAAO,GAAKC,GAAU,GACxBC,EAAiBC,KAAK,CAACH,EAAM,EAAGC,EAAS,IAEpCC,CACT,CAEA,SAASE,EAAaC,EAAQC,GAC5B,OAAOD,EAAOE,OAAM,CAACC,EAAIC,IAAQD,IAAOF,EAAOG,IACjD,CAmCA,SAASC,EAAYX,EAAWY,GAC9B,MAAMC,EAlCR,SAAwBb,EAAWY,GACjC,MAAME,EAAQ,CACZ,CACEC,MAAO,IAAIC,MAAM,GAAGC,OAAOC,KAAI,IAAM,IAAIF,MAAM,GAAGC,KAAK,KACvDE,KAAMnB,EACNoB,MAAO,CAACpB,KAMZ,IAFAc,EAAM,GAAGC,MAAMf,EAAU,IAAIA,EAAU,IAAM,EAEtCc,EAAMO,OAAS,GAAG,CACvB,MAAMC,EAAMR,EAAMS,QAClB,GAAIlB,EAAaiB,EAAIH,KAAMP,GACzB,OAAOU,EAAIF,MAEb,MAAMI,EAAoBzB,EAAoBuB,EAAIH,MAClD,IAAK,MAAMhB,KAAoBqB,EAG7B,GAD0D,IAAxDF,EAAIP,MAAMZ,EAAiB,IAAIA,EAAiB,IAClC,CACd,MAAMsB,EAAuBH,EAAIP,MA1DlBG,KAAKjB,GAAQA,EAAIyB,UA2DhCD,EAAStB,EAAiB,IAAIA,EAAiB,IAAM,EACrDW,EAAMV,KAAK,CACTW,MAAOU,EACPN,KAAMhB,EACNiB,MAAO,IAAIE,EAAIF,MAAOjB,IAE1B,CAEJ,CACF,CAGsBwB,CAAe3B,EAAWY,GACxCgB,EAAaf,EAAYQ,OAAS,EACxCQ,QAAQC,IACL,qBAAoBF,KACnBA,EAAa,EAAI,QAAU,8BAG/B,IAAK,MAAMG,KAAQlB,EACjBgB,QAAQC,IAAK,MAAKC,KAEtB,CAEAC,OAAOrB,YAAcA,EAErBA,EAAY,CAAC,EAAG,GAAI,CAAC,EAAG,G","sources":["webpack://knights-travails/./src/index.js"],"sourcesContent":["\"use strict\";\n\nfunction copy2dArray(originalArray) {\n  return originalArray.map((row) => row.slice());\n}\n\nfunction getPossibleNextMove(startCoor) {\n  const [row, column] = startCoor;\n  const possibleNextMove = [];\n  if (row <= 5 && column <= 6) {\n    possibleNextMove.push([row + 2, column + 1]);\n  }\n  if (row <= 6 && column <= 5) {\n    possibleNextMove.push([row + 1, column + 2]);\n  }\n  if (row >= 1 && column <= 5) {\n    possibleNextMove.push([row - 1, column + 2]);\n  }\n  if (row >= 2 && column <= 6) {\n    possibleNextMove.push([row - 2, column + 1]);\n  }\n  if (row >= 2 && column >= 1) {\n    possibleNextMove.push([row - 2, column - 1]);\n  }\n  if (row >= 1 && column >= 2) {\n    possibleNextMove.push([row - 1, column - 2]);\n  }\n  if (row <= 6 && column >= 2) {\n    possibleNextMove.push([row + 1, column - 2]);\n  }\n  if (row <= 5 && column >= 1) {\n    possibleNextMove.push([row + 2, column - 1]);\n  }\n  return possibleNextMove;\n}\n\nfunction isArrayEqual(array1, array2) {\n  return array1.every((el, idx) => el === array2[idx]);\n}\n\nfunction getFastestPath(startCoor, targetCoor) {\n  const queue = [\n    {\n      board: new Array(8).fill().map(() => new Array(8).fill(0)),\n      coor: startCoor,\n      moves: [startCoor],\n    },\n  ];\n\n  queue[0].board[startCoor[0]][startCoor[1]] = 1;\n\n  while (queue.length > 0) {\n    const cur = queue.shift();\n    if (isArrayEqual(cur.coor, targetCoor)) {\n      return cur.moves;\n    }\n    const possibleNextMoves = getPossibleNextMove(cur.coor);\n    for (const possibleNextMove of possibleNextMoves) {\n      const isVisited =\n        cur.board[possibleNextMove[0]][possibleNextMove[1]] === 1;\n      if (!isVisited) {\n        const newBoard = copy2dArray(cur.board);\n        newBoard[possibleNextMove[0]][possibleNextMove[1]] = 1;\n        queue.push({\n          board: newBoard,\n          coor: possibleNextMove,\n          moves: [...cur.moves, possibleNextMove],\n        });\n      }\n    }\n  }\n}\n\nfunction knightMoves(startCoor, targetCoor) {\n  const fastestPath = getFastestPath(startCoor, targetCoor);\n  const pathLength = fastestPath.length - 1;\n  console.log(\n    `=> You made it in ${pathLength} ${\n      pathLength > 0 ? \"moves\" : \"move\"\n    }!  Here's your path:`,\n  );\n  for (const path of fastestPath) {\n    console.log(`  [${path}]`);\n  }\n}\n\nwindow.knightMoves = knightMoves;\n\nknightMoves([3, 3], [4, 3]);\n"],"names":["getPossibleNextMove","startCoor","row","column","possibleNextMove","push","isArrayEqual","array1","array2","every","el","idx","knightMoves","targetCoor","fastestPath","queue","board","Array","fill","map","coor","moves","length","cur","shift","possibleNextMoves","newBoard","slice","getFastestPath","pathLength","console","log","path","window"],"sourceRoot":""}